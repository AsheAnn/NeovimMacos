{
  "erc20 sample": {
    "prefix": "erc20",
    "body": [
      "// https://eips.ethereum.org/EIPS/eip-20",
      "// SPDX-License-Identifier: MIT",
      "pragma solidity >=0.5.0 <0.8.0;",
      "",
      "interface Token {",
      "",
      "    /// @param _owner The address from which the balance will be retrieved",
      "    /// @return balance the balance",
      "    function balanceOf(address _owner) external view returns (uint256 balance);",
      "",
      "    /// @notice send `_value` token to `_to` from `msg.sender`",
      "    /// @param _to The address of the recipient",
      "    /// @param _value The amount of token to be transferred",
      "    /// @return success Whether the transfer was successful or not",
      "    function transfer(address _to, uint256 _value)  external returns (bool success);",
      "",
      "    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`",
      "    /// @param _from The address of the sender",
      "    /// @param _to The address of the recipient",
      "    /// @param _value The amount of token to be transferred",
      "    /// @return success Whether the transfer was successful or not",
      "    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);",
      "",
      "    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens",
      "    /// @param _spender The address of the account able to transfer the tokens",
      "    /// @param _value The amount of wei to be approved for transfer",
      "    /// @return success Whether the approval was successful or not",
      "    function approve(address _spender  , uint256 _value) external returns (bool success);",
      "",
      "    /// @param _owner The address of the account owning tokens",
      "    /// @param _spender The address of the account able to transfer the tokens",
      "    /// @return remaining Amount of remaining tokens allowed to spent",
      "    function allowance(address _owner, address _spender) external view returns (uint256 remaining);",
      "",
      "    event Transfer(address indexed _from, address indexed _to, uint256 _value);",
      "    event Approval(address indexed _owner, address indexed _spender, uint256 _value);",
      "}",
      "",
      "contract Standard_Token is Token {",
      "    uint256 constant private MAX_UINT256 = 2**256 - 1;",
      "    mapping (address => uint256) public balances;",
      "    mapping (address => mapping (address => uint256)) public allowed;",
      "    uint256 public totalSupply;",
      "    /*",
      "    NOTE:",
      "    The following variables are OPTIONAL vanities. One does not have to include them.",
      "    They allow one to customise the token contract & in no way influences the core functionality.",
      "    Some wallets/interfaces might not even bother to look at this information.",
      "    */",
      "    string public name;                   //fancy name: eg Simon Bucks",
      "    uint8 public decimals;                //How many decimals to show.",
      "    string public symbol;                 //An identifier: eg SBX",
      "",
      "    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string  memory _tokenSymbol) {",
      "        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens",
      "        totalSupply = _initialAmount;                        // Update total supply",
      "        name = _tokenName;                                   // Set the name for display purposes",
      "        decimals = _decimalUnits;                            // Amount of decimals for display purposes",
      "        symbol = _tokenSymbol;                               // Set the symbol for display purposes",
      "    }",
      "",
      "    function transfer(address _to, uint256 _value) public override returns (bool success) {",
      "        require(balances[msg.sender] >= _value, \"token balance is lower than the value requested\");",
      "        balances[msg.sender] -= _value;",
      "        balances[_to] += _value;",
      "        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars",
      "        return true;",
      "    }",
      "",
      "    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success) {",
      "        uint256 allowance = allowed[_from][msg.sender];",
      "        require(balances[_from] >= _value && allowance >= _value, \"token balance or allowance is lower than amount requested\");",
      "        balances[_to] += _value;",
      "        balances[_from] -= _value;",
      "        if (allowance < MAX_UINT256) {",
      "            allowed[_from][msg.sender] -= _value;",
      "        }",
      "        emit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars",
      "        return true;",
      "    }",
      "",
      "    function balanceOf(address _owner) public override view returns (uint256 balance) {",
      "        return balances[_owner];",
      "    }",
      "",
      "    function approve(address _spender, uint256 _value) public override returns (bool success) {",
      "        allowed[msg.sender][_spender] = _value;",
      "        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars",
      "        return true;",
      "    }",
      "",
      "    function allowance(address _owner, address _spender) public override view returns (uint256 remaining) {",
      "        return allowed[_owner][_spender];",
      "    }",
      "}"
    ],
    "description": "erc20 sample"
  },
  "erc721 interface": {
    "prefix": "erc721i",
    "body": [
      "// https://eips.ethereum.org/EIPS/eip-721, http://erc721.org/ ",
      "// SPDX-License-Identifier: MIT",
      "pragma solidity >=0.5.0 <0.8.0;",
      "",
      "/// @title ERC-721 Non-Fungible Token Standard",
      "/// @dev See https://eips.ethereum.org/EIPS/eip-721",
      "///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.",
      "interface ERC721 /* is ERC165 */ {",
      "    /// @dev This emits when ownership of any NFT changes by any mechanism.",
      "    ///  This event emits when NFTs are created (`from` == 0) and destroyed",
      "    ///  (`to` == 0). Exception: during contract creation, any number of NFTs",
      "    ///  may be created and assigned without emitting Transfer. At the time of",
      "    ///  any transfer, the approved address for that NFT (if any) is reset to none.",
      "    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);",
      "",
      "    /// @dev This emits when the approved address for an NFT is changed or",
      "    ///  reaffirmed. The zero address indicates there is no approved address.",
      "    ///  When a Transfer event emits, this also indicates that the approved",
      "    ///  address for that NFT (if any) is reset to none.",
      "    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);",
      "",
      "    /// @dev This emits when an operator is enabled or disabled for an owner.",
      "    ///  The operator can manage all NFTs of the owner.",
      "    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);",
      "",
      "    /// @notice Count all NFTs assigned to an owner",
      "    /// @dev NFTs assigned to the zero address are considered invalid, and this",
      "    ///  function throws for queries about the zero address.",
      "    /// @param _owner An address for whom to query the balance",
      "    /// @return The number of NFTs owned by `_owner`, possibly zero",
      "    function balanceOf(address _owner) external view returns (uint256);",
      "",
      "    /// @notice Find the owner of an NFT",
      "    /// @dev NFTs assigned to zero address are considered invalid, and queries",
      "    ///  about them do throw.",
      "    /// @param _tokenId The identifier for an NFT",
      "    /// @return The address of the owner of the NFT",
      "    function ownerOf(uint256 _tokenId) external view returns (address);",
      "",
      "    /// @notice Transfers the ownership of an NFT from one address to another address",
      "    /// @dev Throws unless `msg.sender` is the current owner, an authorized",
      "    ///  operator, or the approved address for this NFT. Throws if `_from` is",
      "    ///  not the current owner. Throws if `_to` is the zero address. Throws if",
      "    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function",
      "    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls",
      "    ///  `onERC721Received` on `_to` and throws if the return value is not",
      "    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.",
      "    /// @param _from The current owner of the NFT",
      "    /// @param _to The new owner",
      "    /// @param _tokenId The NFT to transfer",
      "    /// @param data Additional data with no specified format, sent in call to `_to`",
      "    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory data) external payable;",
      "",
      "    /// @notice Transfers the ownership of an NFT from one address to another address",
      "    /// @dev This works identically to the other function with an extra data parameter,",
      "    ///  except this function just sets data to \"\".",
      "    /// @param _from The current owner of the NFT",
      "    /// @param _to The new owner",
      "    /// @param _tokenId The NFT to transfer",
      "    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;",
      "",
      "    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE",
      "    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE",
      "    ///  THEY MAY BE PERMANENTLY LOST",
      "    /// @dev Throws unless `msg.sender` is the current owner, an authorized",
      "    ///  operator, or the approved address for this NFT. Throws if `_from` is",
      "    ///  not the current owner. Throws if `_to` is the zero address. Throws if",
      "    ///  `_tokenId` is not a valid NFT.",
      "    /// @param _from The current owner of the NFT",
      "    /// @param _to The new owner",
      "    /// @param _tokenId The NFT to transfer",
      "    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;",
      "",
      "    /// @notice Change or reaffirm the approved address for an NFT",
      "    /// @dev The zero address indicates there is no approved address.",
      "    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized",
      "    ///  operator of the current owner.",
      "    /// @param _approved The new approved NFT controller",
      "    /// @param _tokenId The NFT to approve",
      "    function approve(address _approved, uint256 _tokenId) external payable;",
      "",
      "    /// @notice Enable or disable approval for a third party (\"operator\") to manage",
      "    ///  all of `msg.sender`'s assets",
      "    /// @dev Emits the ApprovalForAll event. The contract MUST allow",
      "    ///  multiple operators per owner.",
      "    /// @param _operator Address to add to the set of authorized operators",
      "    /// @param _approved True if the operator is approved, false to revoke approval",
      "    function setApprovalForAll(address _operator, bool _approved) external;",
      "",
      "    /// @notice Get the approved address for a single NFT",
      "    /// @dev Throws if `_tokenId` is not a valid NFT.",
      "    /// @param _tokenId The NFT to find the approved address for",
      "    /// @return The approved address for this NFT, or the zero address if there is none",
      "    function getApproved(uint256 _tokenId) external view returns (address);",
      "",
      "    /// @notice Query if an address is an authorized operator for another address",
      "    /// @param _owner The address that owns the NFTs",
      "    /// @param _operator The address that acts on behalf of the owner",
      "    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise",
      "    function isApprovedForAll(address _owner, address _operator) external view returns (bool);",
      "}",
      "",
      "interface ERC165 {",
      "    /// @notice Query if a contract implements an interface",
      "    /// @param interfaceID The interface identifier, as specified in ERC-165",
      "    /// @dev Interface identification is specified in ERC-165. This function",
      "    ///  uses less than 30,000 gas.",
      "    /// @return `true` if the contract implements `interfaceID` and",
      "    ///  `interfaceID` is not 0xffffffff, `false` otherwise",
      "    function supportsInterface(bytes4 interfaceID) external view returns (bool);",
      "}"
    ],
    "description": "erc721 interface"
  },
  "erc20 interface": {
    "prefix": "erc20i",
    "body": [
      "// https://eips.ethereum.org/EIPS/eip-20",
      "// SPDX-License-Identifier: MIT",
      "pragma solidity >=0.5.0 <0.8.0;",
      "",
      "interface Token {",
      "",
      "    /// @param _owner The address from which the balance will be retrieved",
      "    /// @return balance the balance",
      "    function balanceOf(address _owner) external view returns (uint256 balance);",
      "",
      "    /// @notice send `_value` token to `_to` from `msg.sender`",
      "    /// @param _to The address of the recipient",
      "    /// @param _value The amount of token to be transferred",
      "    /// @return success Whether the transfer was successful or not",
      "    function transfer(address _to, uint256 _value) external returns (bool success);",
      "",
      "    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`",
      "    /// @param _from The address of the sender",
      "    /// @param _to The address of the recipient",
      "    /// @param _value The amount of token to be transferred",
      "    /// @return success Whether the transfer was successful or not",
      "    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);",
      "",
      "    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens",
      "    /// @param _spender The address of the account able to transfer the tokens",
      "    /// @param _value The amount of wei to be approved for transfer",
      "    /// @return success Whether the approval was successful or not",
      "    function approve(address _spender, uint256 _value) external returns (bool success);",
      "",
      "    /// @param _owner The address of the account owning tokens",
      "    /// @param _spender The address of the account able to transfer the tokens",
      "    /// @return remaining Amount of remaining tokens allowed to spent",
      "    function allowance(address _owner, address _spender) external view returns (uint256 remaining);",
      "",
      "    event Transfer(address indexed _from, address indexed _to, uint256 _value);",
      "    event Approval(address indexed _owner, address indexed _spender, uint256 _value);",
      "}"
    ],
    "description": "erc20 interface"
  }
}
